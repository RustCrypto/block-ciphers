name: aes

on:
  pull_request:
    paths:
      - ".github/workflows/aes.yml"
      - "aes/**"
      - "Cargo.*"
  push:
    branches: master

defaults:
  run:
    working-directory: aes

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"

jobs:
  # Builds for no_std platforms
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.56.0 # MSRV
          - stable
        target:
          - thumbv7em-none-eabi
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: cargo check
      - run: |
          cargo build --target ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_force_soft"
        run: |
          cargo build --target ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_compact"
        run: |
          cargo build --target ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_force_soft --cfg aes_compact"
        run: |
          cargo build --target ${{ matrix.target }}
          cargo build --target ${{ matrix.target }} --features hazmat

  minimal-versions:
    uses: RustCrypto/actions/.github/workflows/minimal-versions.yml@master
    with:
        working-directory: ${{ github.workflow }}

  # Tests for the AES-NI backend
  aesni:
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
      RUSTDOCFLAGS: "-Ctarget-feature=+aes,+ssse3"
      RUSTFLAGS: "-Dwarnings -Ctarget-feature=+aes,+ssse3"
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.56.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.56.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features hazmat
      - run: cargo test --target ${{ matrix.target }} --all-features

  # Tests for CPU feature autodetection with fallback to portable software implementation
  autodetect:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.56.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.56.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --features hazmat
      - run: cargo test --target ${{ matrix.target }} --all-features

  # Tests for the portable software backend (i.e. `aes_force_soft`-only)
  soft:
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-Dwarnings --cfg aes_force_soft"
    strategy:
      matrix:
        include:
          # 32-bit Linux
          - target: i686-unknown-linux-gnu
            rust: 1.56.0 # MSRV
            deps: sudo apt update && sudo apt install gcc-multilib
          - target: i686-unknown-linux-gnu
            rust: stable
            deps: sudo apt update && sudo apt install gcc-multilib

          # 64-bit Linux
          - target: x86_64-unknown-linux-gnu
            rust: 1.56.0 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - run: ${{ matrix.deps }}
      - run: cargo test --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --all-features


  # Cross-compiled tests
  cross:
    strategy:
      matrix:
        include:
          # ARM64
          - target: aarch64-unknown-linux-gnu
            rust: 1.56.0 # MSRV
          - target: aarch64-unknown-linux-gnu
            rust: stable

          # PPC32
          - target: powerpc-unknown-linux-gnu
            rust: 1.56.0 # MSRV
          - target: powerpc-unknown-linux-gnu
            rust: stable
    runs-on: ubuntu-latest
    # Cross mounts only current package, i.e. by default it ignores workspace's Cargo.toml
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - run: ${{ matrix.deps }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Install pre-compiled cross
        run: |
          export URL=$(curl -s https://api.github.com/repos/cross-rs/cross/releases/latest | jq -r '.assets[] | select(.name | contains("x86_64-unknown-linux-gnu.tar.gz")) | .browser_download_url')
          wget -O /tmp/binaries.tar.gz $URL
          tar -C /tmp -xzf /tmp/binaries.tar.gz
          mv /tmp/cross ~/.cargo/bin
      - run: |
          cross test --package aes --target ${{ matrix.target }}
          cross test --package aes --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_force_soft"
        run: |
          cross test --package aes --target ${{ matrix.target }}
          cross test --package aes --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_compact"
        run: |
          cross test --package aes --target ${{ matrix.target }}
          cross test --package aes --target ${{ matrix.target }} --features hazmat
      - env:
          RUSTFLAGS: "-Dwarnings --cfg aes_force_soft --cfg aes_compact"
        run: |
          cross test --package aes --target ${{ matrix.target }}
          cross test --package aes --target ${{ matrix.target }} --features hazmat

  # ARMv8 cross-compiled tests for AES intrinsics (nightly-only)
  armv8:
    env:
      RUSTFLAGS: "-Dwarnings --cfg aes_armv8"
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            rust: nightly
    runs-on: ubuntu-latest
    # Cross mounts only current package, i.e. by default it ignores workspace's Cargo.toml
    defaults:
      run:
        working-directory: .
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - run: ${{ matrix.deps }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true
      - name: Install pre-compiled cross
        run: |
          export URL=$(curl -s https://api.github.com/repos/cross-rs/cross/releases/latest | jq -r '.assets[] | select(.name | contains("x86_64-unknown-linux-gnu.tar.gz")) | .browser_download_url')
          wget -O /tmp/binaries.tar.gz $URL
          tar -C /tmp -xzf /tmp/binaries.tar.gz
          mv /tmp/cross ~/.cargo/bin
      - run: cross test --package aes --target ${{ matrix.target }}
      - run: cross test --package aes --target ${{ matrix.target }} --features hazmat
      - run: cross test --package aes --target ${{ matrix.target }} --all-features

  clippy:
    env:
      RUSTFLAGS: "-Dwarnings --cfg aes_compact"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: RustCrypto/actions/cargo-cache@master
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.56.0 # MSRV
          components: clippy
          override: true
          profile: minimal
      - run: cargo clippy --features hazmat -- -D warnings
